//sample program that demonstrates the creation and use of classes and objects in C++:(~0827CT221026)

Classes:
A class is a blueprint or template that defines the data members (variables) and member functions (methods) that describe the behavior and characteristics
of an object.
In operating system design, classes can be used to represent system components such as processes, threads, memory management units, file systems, and
device drivers. For example, you could have a Process class that encapsulates process-related data (process ID, state, priority, memory usage, etc.) and
operations (create, suspend, resume, terminate, etc.).

Objects:
An object is an instance of a class, created using the class blueprint.
Objects represent specific instances of system components, each with its own unique state and behavior.
In an operating system, you may have multiple objects of the Process class, each representing a different process running on the system.
Objects can interact with each other through their member functions, simulating the interactions between different components of the operating system.

#include <iostream>
#include <string>
using namespace std;

// Define a class called Rectangle
class Rectangle {
private:
    double length;
    double width;

public:
    // Constructor
    Rectangle(double l, double w) {
        length = l;
        width = w;
    }

    // Member functions
    double getArea() {
        return length * width;
    }

    double getPerimeter() {
        return 2 * (length + width);
    }

    void setLength(double l) {
        length = l;
    }

    void setWidth(double w) {
        width = w;
    }
};

int main() {
    // Create an object of the Rectangle class
    Rectangle rect1(5.0, 3.0);

    // Call member functions
    cout << "Area of rect1: " << rect1.getArea() << endl;
    cout << "Perimeter of rect1: " << rect1.getPerimeter() << endl;

    // Change the dimensions of rect1
    rect1.setLength(7.0);
    rect1.setWidth(4.0);

    // Call member functions again
    cout << "Updated area of rect1: " << rect1.getArea() << endl;
    cout << "Updated perimeter of rect1: " << rect1.getPerimeter() << endl;

    // Create another object of the Rectangle class
    Rectangle rect2(2.5, 6.0);

    // Call member functions for rect2
    cout << "Area of rect2: " << rect2.getArea() << endl;
    cout << "Perimeter of rect2: " << rect2.getPerimeter() << endl;

    return 0;
}


Output:
Area of rect1: 15
Perimeter of rect1: 16
Updated area of rect1: 28
Updated perimeter of rect1: 22
Area of rect2: 15
Perimeter of rect2: 17


(~ by: Janhvee Laad)
